What happens when you initialize a repository? Why do you need to do it?
	
	Git is going to track that folder using a hidden folder called .git that
	contains metadata.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	In the staging area there are only the files that you want to include. It
	offers the value that you can track only the files you want and it will be
	easier to do and will save disc space.

How can you use the staging area to make sure you have one commit per logical
change?
	
	You can add the files that you want to commit to the staging area,
	so you will only commit those files. Furthermore, you can compare
	the staging area with the most recent commit or with the working
	directory in order to ensure that you have added only what you wanted
	to commit.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	One situation is when you are going to try a new experimental feature but
	you are not sure if it will finally be included in the master version. Another
	situation can be a translation of the same application.

How do the diagrams help you visualize the branch structure?
	
	It can help watching which commits are reacheables from another, because the
	one commit could be in one branch and the other commit in another branch.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	The result is the join of two branches. All the lines added in any of the
	two branches will be added. All the lines substracted to any of the two
	branches will be substracted as well. The diagram represent the join of two
	different branches in a single point, so the two branches become only one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
